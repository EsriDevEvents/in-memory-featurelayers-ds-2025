import{dZ as E,J as h,a6 as y,x as S,Q as N,d_ as D,d$ as l,G as M}from"./index-Dv-JqQDv.js";import{$ as d}from"./Mesh-CgH6w2J9.js";import{N as w}from"./MeshTransform-BahjckjL.js";import{o as F,i as T}from"./External-DIu21-ag.js";import"./axisAngleDegrees-CRhw0Lf9.js";import"./quat-B52zwwOM.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./MeshComponent-CKdOnzQW.js";import"./imageUtils-CyYQ2a5H.js";import"./MeshVertexAttributes-CERcIROX.js";import"./MeshLocalVertexSpace-Bf4xmfpu.js";import"./meshVertexSpaceUtils-1Rv9Wig9.js";import"./triangulationUtils-BhDjnI5P.js";import"./earcut-BqgeR2O3.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./DoubleArray-DzYWDmvK.js";import"./Indices-BTetzIKW.js";import"./plane-4BN6ZBDV.js";import"./mat4f64-Dk4dwAN8.js";import"./vec2f64-Diu2Kaa8.js";import"./mathUtils-urfecwwD.js";import"./deduplicate-DQWVMiBh.js";import"./projection-CsHR6jE_.js";import"./mat3-B7LiNcRs.js";import"./spatialReferenceEllipsoidUtils-MFgRhPLs.js";import"./computeTranslationToOriginAndRotation-DBznw1xD.js";import"./BufferView-_0HdWB6j.js";import"./vec2-DGogPjh1.js";import"./vec3-zd-aCjeY.js";import"./vec4-mLjVaC0N.js";import"./projectPointToVector-ARkh6gdu.js";import"./vertexSpaceConversion-lekgA4Rd.js";const I=()=>M.getLogger("esri.rest.support.meshFeatureSet");function lt(t,r,e){const o=e.features;e.features=[],delete e.geometryType;const n=E.fromJSON(e);if(n.geometryType="mesh",!e.assetMaps)return n;const s=A(r,e.assetMaps),i=t.sourceSpatialReference??h.WGS84,u=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?$(a.includes("*")?null:new Set(a)):()=>({});for(const p of o){const m=x(p,u,i,r,s);n.features.push(new y({geometry:m,attributes:c(p)}))}return n}function $(t){return({attributes:r})=>{if(!r)return{};if(!t)return r;for(const e in r)t.has(e)||delete r[e];return r}}function x(t,r,e,o,n){const s=t.attributes[r],i=n.get(s);if(i==null||!t.geometry)return null;const u=L(t,e,o),a=S.fromJSON(t.geometry);a.spatialReference=e;const c=O(t.attributes,o),p=e.isGeographic?"local":"georeferenced",m=P(i);return m?d.createWithExternalSource(u,m,{extent:a,transform:c,vertexSpace:p}):d.createIncomplete(u,{extent:a,transform:c,vertexSpace:p})}function L({attributes:t},r,{transformFieldRoles:e}){const o=t[e.originX],n=t[e.originY],s=t[e.originZ];return new N({x:o,y:n,z:s,spatialReference:r})}function O(t,{transformFieldRoles:r}){return new w({translation:[t[r.translationX],-t[r.translationZ],t[r.translationY]],rotationAxis:[t[r.rotationX],-t[r.rotationZ],t[r.rotationY]],rotationAngle:t[r.rotationDeg],scale:[t[r.scaleX],t[r.scaleZ],t[r.scaleY]]})}var f;function A(t,r){const e=new Map;for(const o of r){const n=o.parentGlobalId;if(n==null)continue;const s=o.assetName,i=o.assetType,u=o.assetHash,a=o.assetURL,c=o.conversionStatus,p=o.seqNo,m=D(i,t.supportedFormats);if(!m){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const g=l(e,n,()=>({files:new Map}));l(g.files,s,()=>({name:s,type:i,mimeType:m,status:b(c),parts:[]})).parts[p]={hash:u,url:a}}return e}function P(t){const r=Array.from(t.files.values()),e=new Array;for(const o of r){if(o.status!==f.COMPLETED)return null;const n=new Array;for(const s of o.parts){if(!s)return null;n.push(new F(s.url,s.hash))}e.push(new T(o.name,o.mimeType,n))}return e}function b(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{A as assetMapFromAssetMapsJSON,x as extractMesh,lt as meshFeatureSetFromJSON};
