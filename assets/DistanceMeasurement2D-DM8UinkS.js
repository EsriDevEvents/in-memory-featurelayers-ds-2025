import{j as s,y as r,P as R,lT as G,lS as ee,o as g,gH as $,hM as w,Q as D,ga as te,a6 as A,g6 as ie,ig as U,f9 as se,ii as N,np as re,no as ne,en as H,bL as oe,dF as M,J as I,c9 as ae,lU as le,G as pe,lW as T,gc as me,dE as he,g9 as ue}from"./index-Dv-JqQDv.js";import{e as E,B as ce,n as B}from"./jsxFactory-C3RLkrq9.js";import{e as de}from"./defaultUnit-DR4mV0yv.js";import{g as ge,d as ve,D as ye}from"./unitFormatUtils-D-q5OaJY.js";import{h as _e}from"./UpdatingHandles-C0Kh7aEt.js";import{geodesicLength as we,geodesicDensify as fe,planarLength as be}from"./geometryEngine-C5uHQPwZ.js";import{w as q,v as C,R as O}from"./geodesicUtils-C4H45CeC.js";import x from"./GraphicsLayer-D1PdSLqE.js";import{l as P}from"./ViewingMode-Dodu7ZZk.js";import{f as Me}from"./SnappingVisualizer2D-WoQuRNq-.js";import{l as Le}from"./Draw-DVYrNR5V.js";import{E as z,p as $e,P as Se}from"./EditGeometryOperations-B2SzBwZq.js";import{n as De,p as Te,E as Ce,f as Oe}from"./InteractiveToolBase-ClRFM-nV.js";import{S as xe}from"./GraphicManipulator-BDvk10oi.js";import{e as Ae}from"./SnappingContext-lR2hMWGP.js";import{f as Re}from"./SnappingDragPipelineStep-B5YcZAo8.js";import{a as ke}from"./SnappingManagerPool-Bm5IY62Y.js";import{N as Ge}from"./SnappingManager-BxBCA2Ex.js";import{p as Ue,u as He}from"./MeasurementWidgetContent-BpWV4MlP.js";import{e as W}from"./globalCss-CZa70j6i.js";import"./getDefaultUnitForView-CsWpEOAw.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./Cyclical-L5YKfO29.js";import"./quantityUtils-CvTt11a2.js";import"./geometryEngineBase-RmbNeFm7.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-iwj77qVb.js";import"./GraphicsCollection-DlcRCtU0.js";import"./vec2-DGogPjh1.js";import"./vec2f64-Diu2Kaa8.js";import"./enums-BRXbslMp.js";import"./SnappingVisualizer-be9i9okW.js";import"./PointSnappingHint-EBEIOVE5.js";import"./projectVectorToVector-BbXjU1Ty.js";import"./projectPointToVector-ARkh6gdu.js";import"./SnappingOperation-D2VtofMm.js";import"./Scheduler-KZBBWfDI.js";import"./signal-0tlktF45.js";import"./debugFlags-CVnXAL57.js";import"./InputManager-BwD1PEf3.js";import"./keybindings-DX6sI0di.js";import"./screenUtils-DKZWDFXK.js";import"./elevationInfoUtils-Cey9W7Lb.js";import"./surfaceCoordinateSystems-Djy4b_d8.js";import"./memoize-DsJmrG76.js";import"./ReactiveSet-DhWxTTYq.js";import"./dehydratedFeatureComparison-JrNDQOYF.js";import"./SketchLabelOptions-DrqnZvLd.js";import"./hydratedFeatures-D9SfIMrp.js";import"./mat2d-C6u6dH6d.js";import"./mat2df64-CBKYtunK.js";import"./quat-B52zwwOM.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./plane-4BN6ZBDV.js";import"./mat4f64-Dk4dwAN8.js";import"./mathUtils-urfecwwD.js";import"./geometry2dUtils-BOZAHPKg.js";import"./meshVertexSpaceUtils-1Rv9Wig9.js";import"./MeshLocalVertexSpace-Bf4xmfpu.js";import"./interfaces-D6pIddIh.js";import"./drapedUtils-nWPHxHp9.js";import"./sphere-j1PWtIhy.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./utils-CXgSw6Sd.js";import"./layerViewUtils-D2JqIDZ8.js";import"./geodesicLengthMeasurementUtils-BLtZnsPD.js";import"./UnitSelect-C-nWBhb5.js";const L=1e5;let h=class extends De{constructor(e){super(e),this._drawActive=!1,this._measurementLayer=new x({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new x({internal:!0,listMode:"hide",visible:!1}),this._snappingLayer=new x({internal:!0,listMode:"hide",visible:!1}),this._updatingHandles=new _e,this._vertices=[],this.geodesicDistanceThreshold=null,this.measurement=null,this.measurementLabel=null}initialize(){G("esri/core/t9n/Units").then(t=>{this.messages=t});const e=this.view;this._draw=new Le({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),e.focus(),this._snappingManagerResult=ke(e),this.addHandles([ee(async()=>{this.messages=await G("esri/core/t9n/Units")}),g(()=>[this.unit,this.geodesicDistanceThreshold,this.messages],()=>{this._updatePolylines()},$),g(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:i})=>i);for(const{handle:i}of this._vertices)i.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)}),g(()=>this.snappingOptions.featureSources,t=>{for(const i of t)i.layer!==this._measurementLayer&&i.layer!==this._manipulatorLayer||(i.enabled=!1)},$),this._snappingManagerResult]),Ge(this)}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=w(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=w(this._measurementLayer),this._manipulatorLayer=w(this._manipulatorLayer),this._snappingLayer=w(this._snappingLayer),this._updatingHandles=w(this._updatingHandles),this._resetVertices()}get _snappingManager(){return this._snappingManagerResult.snappingManager}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}get snappingOptions(){return this._snappingManager.options}get updating(){return this._updatingHandles.updating||this._snappingManager.updating}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0,this._snappingLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1,this._snappingLayer.visible=!1}_getSnappingContext(e){return new Ae({elevationInfo:{mode:"on-the-ground",offset:0},pointer:e,editGeometryOperations:new z(new $e("point",Se(!1,!1,this.view.spatialReference)),P.Local),visualizer:new Me(this._snappingLayer)})}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const e=this._snappingManager,t=this._draw.create("polyline",{mode:"click",snappingManager:e});t.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],i=>this._updateSketch(i.vertices)),t.on("draw-complete",()=>{this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:n,manipulator:u}=this._vertices.pop();n.remove(),this.manipulators.remove(u)}for(let n=this._vertices.length;n<e.length;n++){const[u,d]=e[n],v=new D({x:u,y:d,spatialReference:t}),y=Ie(v,this.view,this._manipulatorLayer);this.manipulators.add(y);const f=z.fromGeometry(v,P.Local),K=[f.on("vertex-update",b=>{const _=b.vertices.at(0);_&&(this._vertices[n].coord=[_.pos[0],_.pos[1]],this._updatePolylines())}),Te(y,(b,_,We,Q)=>{const J=this._getSnappingContext(Q),X=this._snappingManager,Y=this._updatingHandles,{snappingStep:Z}=Re({snappingContext:J,snappingManager:X,updatingHandles:Y});_.next(Ce(this.view)).next(S=>{if(S.action==="start"){const k=new D(S.mapStart);b.graphic.geometry=k,f.trySetGeometry(k)}return S}).next(...Z).next(Oe({operations:f})).next(()=>{b.graphic.geometry=f.data.geometry})})];this._vertices.push({manipulator:y,coord:[u,d],handle:te(K)})}const i=this._vertices.length-1,o=this._vertices[i],[l,a]=e[i];o.coord[0]===l&&o.coord[1]===a||(o.coord=[l,a],o.manipulator.graphic.geometry=new D({x:l,y:a,spatialReference:t}));const p=this._drawActive?this._vertices[i].manipulator:null;this.manipulators.forEach(({manipulator:n})=>{n.interactive=p==null||n!==p}),this._updatePolylines()}_updatePolylines(){var v;if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=this._vertices.map(({coord:y})=>y),{measurement:t,drawing:i,original:o}=Ee(e,this.view.spatialReference,this.geodesicDistanceThreshold);this._set("measurement",t);const l=ze(this.messages,t,this.unit);let a,p;this._set("measurementLabel",l);const{graphics:n}=this._measurementLayer,u=n.length===2,{effectiveTheme:d}=this.view;u?(a=n.at(0),p=n.at(1)):(a=new A({symbol:new ie({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:U(d.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:d.accentColor.toArray()}]}}})}),p=new A({symbol:new se({color:d.textColor,haloColor:N(U(d.textColor,re.Low),.5),haloSize:2,font:new ne({size:14,family:"sans-serif"})})}),n.removeAll(),n.addMany([a,p])),a.geometry=i,p.geometry=(v=o.extent)==null?void 0:v.center,p.symbol.text=l}};function Ie(e,t,i){const o=N(t.effectiveTheme.accentColor,.5),l={type:"simple-line",width:0},a=8,p=new H({style:"circle",color:o,size:a,outline:l}),n=new H({style:"circle",color:o,size:1.5*a,outline:l}),u=new A({geometry:e,symbol:p});return new xe({view:t,layer:i,graphic:u,focusedSymbol:n})}function Ee(e,t,i){const o=new oe({paths:[e],spatialReference:t});let l,a;if(t.isGeographic)if(q(t))l=C([o],"meters")[0],a=O(o,L);else{const p=M(o,I.WGS84),n=O(p,L);l=C([p],"meters")[0],a=M(n,t)}else if(t.isWebMercator)l=we(o,"meters"),a=fe(o,L,"meters");else{const p=be(o,"meters");if(i!=null&&p>=i){const n=M(o,I.WGS84),u=O(n,L);l=C([n],"meters")[0],a=M(u,t)}else l=p,a=o}return{measurement:{geometry:a,length:l},original:o,drawing:a}}function Be(e){return e!=null}function Pe(e){if(!e)return!1;const{isGeographic:t,isWebMercator:i,isWGS84:o}=e;return t&&!o&&!q(e)||!t&&!i}function ze(e,t,i){if(!t||!e)return"";switch(i){case"metric":return ye(e,t.length,"meters");case"imperial":return ve(e,t.length,"meters");default:return ge(e,ae(t.length,"meters",i),i)}}s([r()],h.prototype,"_drawActive",void 0),s([r({readOnly:!0})],h.prototype,"cursor",null),s([r({value:!0})],h.prototype,"editable",null),s([r({type:Number})],h.prototype,"geodesicDistanceThreshold",void 0),s([r({readOnly:!0})],h.prototype,"measurement",void 0),s([r({readOnly:!0})],h.prototype,"measurementLabel",void 0),s([r()],h.prototype,"messages",void 0),s([r()],h.prototype,"unit",void 0),s([r()],h.prototype,"updating",null),s([r({constructOnly:!0})],h.prototype,"view",void 0),h=s([R("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],h);let c=class extends Ue{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views."}initialize(){this.addHandles([g(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),g(()=>this.unit,e=>{this.tool!=null&&(this.tool.unit=e)},$),g(()=>this.geodesicDistanceThreshold,e=>{this.tool!=null&&(this.tool.geodesicDistanceThreshold=e)},$)])}get geodesicDistanceThreshold(){return this._get("geodesicDistanceThreshold")}set geodesicDistanceThreshold(e){le(pe.getLogger(this),"geodesicDistanceThreshold",{version:"4.29",warnOnce:!0}),this._set("geodesicDistanceThreshold",e)}get measurement(){return this.tool!=null?this.tool.measurement:null}get measurementLabel(){return this.tool!=null?this.tool.measurementLabel:null}get state(){var e;return this.disabled||this.view==null||!Be((e=this.view)==null?void 0:e.spatialReference)?"disabled":this.tool!=null&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return T}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await me(()=>e.ready),Pe(e.spatialReference)&&await he()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new h({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:i}=this;return e!=null&&t.includes(e)?e:t.includes(i)?i:t.length>0?t[0]:i}_validateUnits(e){if(e==null)return[];const t=e.filter(i=>T.includes(i));return t.length===0?T.slice():t}};s([r(de)],c.prototype,"defaultUnit",void 0),s([r()],c.prototype,"geodesicDistanceThreshold",null),s([r({readOnly:!0})],c.prototype,"measurement",null),s([r({readOnly:!0})],c.prototype,"measurementLabel",null),s([r({readOnly:!0})],c.prototype,"state",null),s([r({type:String})],c.prototype,"unit",null),s([r({type:[String]})],c.prototype,"unitOptions",null),c=s([R("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],c);const F=c,V="esri-distance-measurement-2d",j={base:V,newMeasurementButton:`${V}__clear-button`};let m=class extends ce{constructor(e,t){super(e,t),this.messages=null,this.messagesCommon=null,this.viewModel=new F}get active(){return this.viewModel.active}get icon(){return"measure-line"}set icon(e){this._overrideIfSome("icon",e)}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,unit:i,unitOptions:o,viewModel:l}=this,{active:a,measurementLabel:p,state:n,supported:u}=l;return B("div",{"aria-label":this.messages.widgetLabel,class:this.classes(j.base,W.widget,W.panel),key:this,role:"presentation"},this.visible?B(He,{active:a,measurementItems:[{key:"distance",title:e.distance,value:p}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:j.newMeasurementButton,state:n,supported:u,unit:i,unitOptions:o,onNewMeasurementClick:()=>{ue(this.viewModel.start())},onUnitChange:d=>{this.unit=d}}):null)}};s([r({readOnly:!0})],m.prototype,"active",null),s([r()],m.prototype,"icon",null),s([r()],m.prototype,"label",null),s([r()],m.prototype,"uiStrings",void 0),s([r(),E("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")],m.prototype,"messages",void 0),s([r(),E("esri/t9n/common")],m.prototype,"messagesCommon",void 0),s([r()],m.prototype,"unit",null),s([r()],m.prototype,"unitOptions",null),s([r()],m.prototype,"view",null),s([r({type:F})],m.prototype,"viewModel",void 0),s([r({type:Boolean})],m.prototype,"visible",null),m=s([R("esri.widgets.DistanceMeasurement2D")],m);const si=m;export{si as default};
