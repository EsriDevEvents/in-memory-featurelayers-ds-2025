import{E as g}from"./ByteSizeUnit-BsxeN7wM.js";import{a as M}from"./Cyclical-L5YKfO29.js";import{c9 as s,b2 as c,fZ as D,f_ as F,f$ as d,g0 as h,b0 as Z,c3 as w,g1 as x,g2 as y}from"./index-Dv-JqQDv.js";import{m as S}from"./quantityUtils-CvTt11a2.js";function $(r,t,n){return r.units[t][n]}function u(r,t,n,e=2,o="abbr"){return`${c(t,{minimumFractionDigits:e,maximumFractionDigits:e,signDisplay:t>0?"never":"exceptZero"})} ${$(r,n,o)}`}function b(r,t,n,e=2,o="abbr"){return`${c(t,{minimumFractionDigits:e,maximumFractionDigits:e,signDisplay:"exceptZero"})} ${$(r,n,o)}`}function E(r,t,n,e=2,o="abbr"){const i=D(t,n);return u(r,s(t,n,i),i,e,o)}function K(r,t,n,e=2,o="abbr"){const i=D(t,n);return b(r,s(t,n,i),i,e,o)}function j(r,t,n,e=2,o="abbr"){const i=x(t,n);return u(r,s(t,n,i),i,e,o)}function J(r,t,n,e=2,o="abbr"){const i=x(t,n);return b(r,s(t,n,i),i,e,o)}function L(r,t,n,e=2,o="abbr"){const i=F(t,n);return u(r,s(t,n,i),i,e,o)}function N(r,t,n,e=2,o="abbr"){const i=F(t,n);return b(r,s(t,n,i),i,e,o)}function U(r,t,n,e=2,o="abbr"){const i=y(t,n);return u(r,s(t,n,i),i,e,o)}function Y(r,t,n,e=2,o="abbr"){const i=y(t,n);return b(r,s(t,n,i),i,e,o)}function k(r,t,n,e=2,o="abbr"){const i=d(t,n);return u(r,s(t,n,i),i,e,o)}function A(r,t,n,e=2,o="abbr"){const i=h(t,n);return u(r,s(t,n,i),i,e,o)}const T=(r,t)=>({style:"unit",unitDisplay:"narrow",unit:"degree",maximumFractionDigits:t,minimumFractionDigits:t,signDisplay:r>0?"never":"exceptZero"});function G(r,t,n,e,o,i=M,a=!0){let m=i.normalize(S(s(r,t,"degrees"),n,e),0,a);const f=T(m,o??2);return m=B(m,f),c(m,f)}function _(r,t,n,e,o){n!==e&&(r=-r);const i={style:"unit",unitDisplay:"narrow",unit:"degree",maximumFractionDigits:o=o??2,minimumFractionDigits:o,signDisplay:"exceptZero"};let a=s(r,t,"degrees")%360;return a=B(a,i),c(a,i)}const l=new Map;function B(r,t){const n=JSON.stringify(t);let e=l.get(n);return e||(e=new Intl.NumberFormat("en-US",t),l.set(n,e)),/^[-+]?360\.?0*Â°?$/.test(e.format(r))?0:r}const p=["B","kB","MB","GB","TB"];function q(r,t){let n=(t=Math.round(t))===0?0:Math.floor(Math.log(t)/Math.log(g.KILOBYTES));n=w(n,0,p.length-1);const e=c(t/g.KILOBYTES**n,{maximumFractionDigits:2});return Z(r.units.bytes[p[n]],{fileSize:e})}export{k as $,U as B,E as D,J as F,Y as M,q as T,_ as Z,$ as b,L as d,u as g,N as h,A as j,b as p,G as w,K as x,j as y};
