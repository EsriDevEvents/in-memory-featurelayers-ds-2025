import{fu as j,U as R,f3 as F,gI as l,bF as f,dZ as b}from"./index-Dv-JqQDv.js";function m(r,t){const e=r.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!(t!=null&&t.returnCountOnly)?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=F(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function p(r,t,e){const n=await y(r,t,e),o=n.data,s=o.geometryType,a=o.spatialReference,c={};for(const d of o.relatedRecordGroups){const u={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:d.relatedRecords};if(d.objectId!=null)c[d.objectId]=u;else for(const i of Object.keys(d))i!=="relatedRecords"&&(c[d[i]]=u)}return{...n,data:c}}async function h(r,t,e){const n=await y(r,t,e,{returnCountOnly:!0}),o=n.data,s={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(s[a.objectId]=a.count);return{...n,data:s}}async function y(r,t,e={},n){const o=j({...r.query,f:"json",...n,...m(t,n)});return R(r.path+"/queryRelatedRecords",{...e,query:{...e.query,...o}})}async function S(r,t,e){t=l.from(t);const n=f(r);return p(n,t,e).then(o=>{const s=o.data,a={};return Object.keys(s).forEach(c=>a[c]=b.fromJSON(s[c])),a})}async function O(r,t,e){t=l.from(t);const n=f(r);return h(n,t,{...e}).then(o=>o.data)}export{S as executeRelationshipQuery,O as executeRelationshipQueryForCount};
