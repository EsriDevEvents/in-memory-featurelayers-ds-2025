import{k as s,ct as n,j as d,P as l}from"./index-Dv-JqQDv.js";import{N as h}from"./DynamicLayerView3D-DCex5c3l.js";import{m as g}from"./ImageryLayerView-CG15bRrz.js";import"./RenderGeometry-D3-u-2b6.js";import"./vec2f64-Diu2Kaa8.js";import"./vec3f32-Cw9Q6TO_.js";import"./DoubleArray-DzYWDmvK.js";import"./DefaultTechniqueConfiguration-C28-5KBi.js";import"./mat4f64-Dk4dwAN8.js";import"./Indices-BTetzIKW.js";import"./basicInterfaces-wONHx_SN.js";import"./Util-CQaYQWOS.js";import"./debugFlags-CfrzpJ7g.js";import"./interfaces-B8ge7Jg9.js";import"./VertexAttribute-BnAa5VW0.js";import"./ViewingMode-Dodu7ZZk.js";import"./triangle-0a93pGd5.js";import"./sphere-j1PWtIhy.js";import"./plane-4BN6ZBDV.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./mathUtils-urfecwwD.js";import"./lineSegment-C_r0Slta.js";import"./doublePrecisionUtils-B0owpBza.js";import"./requestImageUtils-CO_Ks2k6.js";import"./enums-BlUEVwJR.js";import"./Texture-BsiXXqc8.js";import"./renderState-yUi34s5A.js";import"./Matrix4PassUniform-B-NXMru_.js";import"./BindType-BmZEZMMh.js";import"./mat3-B7LiNcRs.js";import"./vec2-DGogPjh1.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./orientedBoundingBox-BiAE_4Zn.js";import"./quat-B52zwwOM.js";import"./spatialReferenceEllipsoidUtils-MFgRhPLs.js";import"./computeTranslationToOriginAndRotation-DBznw1xD.js";import"./ElevationProvider-DZcTQ1wD.js";import"./boundedPlane-DBcMJiAN.js";import"./verticalOffsetUtils-DVynISE7.js";import"./hydratedFeatures-D9SfIMrp.js";import"./projectVectorToVector-BbXjU1Ty.js";import"./projectPointToVector-ARkh6gdu.js";import"./frustum-W7EQ25hI.js";import"./axisAngleDegrees-CRhw0Lf9.js";import"./weather-K8rA5AE9.js";import"./Scheduler-KZBBWfDI.js";import"./signal-0tlktF45.js";import"./debugFlags-CVnXAL57.js";import"./Float4DrawUniform-DDO6IFxX.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-BaSixQu1.js";import"./InterleavedLayout-B5L5JJLV.js";import"./BufferView-_0HdWB6j.js";import"./types-D0PSWh4d.js";import"./floatRGBA-BTfDfCN4.js";import"./Intersector-BLO31d1u.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-Czm05pt7.js";import"./BufferObject-Dhco7AlX.js";import"./LayerView3D-CIKXmWRc.js";import"./heightModelInfoUtils-DQiO1_HQ.js";import"./projectExtentUtils-qZ3Epvl6.js";import"./geometryServiceUtils-Bg30a3zi.js";import"./project-DnDtHu17.js";import"./ImageMaterial.glsl-BA6g2WGw.js";import"./OutputHighlight.glsl-Bs_35Qno.js";import"./DefaultLayouts-CvcU3NmP.js";import"./ColorMaterial.glsl-D5JrE5f2.js";import"./LayerView-6INZgiuX.js";import"./UpdatingHandles-C0Kh7aEt.js";import"./layerViewUtils-D2JqIDZ8.js";import"./RefreshableLayerView-BkpnzSC-.js";import"./timeSupport-CVYAdt33.js";import"./timeUtils-DFs82Cpv.js";import"./utils-CXgSw6Sd.js";import"./tagSymbols-BPcGfZon.js";import"./popupUtils-CSsimScH.js";let o=class extends g(h){constructor(){super(...arguments),this.type="imagery-3d",this.redrawDebounced=s(async t=>{this.redraw((i,r)=>this._redrawImage(i,r),t)},2e3)}initialize(){this.addHandles([n(()=>this.view.basemapTerrain.ready,()=>this._initializeMaximumDataResolution(),{once:!0,initial:!0}),this.layer.on("redraw",()=>this._updatingHandles.addPromise(this.redrawDebounced()))]),this._updatingHandles.add(()=>{var t,i;return(i=(t=this.layer)==null?void 0:t.exportImageServiceParameters)==null?void 0:i.version},()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>{var t;return(t=this.layer)==null?void 0:t.renderer},()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>this.timeExtent,()=>this._updatingHandles.addPromise(this.refreshDebounced()))}_initializeMaximumDataResolution(){this.maximumDataResolution=this.layer.loaded?this.layer.serviceRasterInfo.pixelSize:null}getFetchOptions(){return{timeExtent:this.timeExtent}}async processResult(t,i,r){i.imageOrCanvasElement?t.image=i.imageOrCanvasElement:(t.image=document.createElement("canvas"),t.pixelData=i.pixelData,await this._redrawImage(t,r))}async _redrawImage(t,i){if(!(t.image instanceof HTMLCanvasElement)||t.pixelData==null)throw new Error;const r=t.image,m=r.getContext("2d"),p=await this.layer.applyRenderer(t.pixelData,{signal:i}),e=this.layer.applyFilter(p).pixelBlock;if(e==null)throw new Error;r.width=e.width,r.height=e.height;const a=m.createImageData(e.width,e.height);a.data.set(e.getAsRGBA()),m.putImageData(a,0,0)}};o=d([l("esri.views.3d.layers.ImageryLayerView3D")],o);const Tt=o;export{Tt as default};
