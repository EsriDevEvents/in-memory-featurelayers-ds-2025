import{o as a,s as c,ga as y,bt as g,dZ as u,j as n,y as m,P as f}from"./index-Dv-JqQDv.js";import{n as v,r as _}from"./FeatureLayerView2D-D1YiRNFt.js";import{r as S}from"./StreamLayerView-D2SUDtyc.js";import"./EffectView-D358IIvW.js";import"./timeSupport-CVYAdt33.js";import"./timeUtils-DFs82Cpv.js";import"./utils-CXgSw6Sd.js";import"./tagSymbols-BPcGfZon.js";import"./highlightReasons-Bl95o-z6.js";import"./Tile-BD3hIcqg.js";import"./quickselect-D0_cvEX6.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./TileKey-DixmkgbB.js";import"./LayerView2D-Ulqog2NM.js";import"./Container-BCZInv5n.js";import"./DefaultUI-BWAdHYa0.js";import"./jsxFactory-C3RLkrq9.js";import"./UpdatingHandles-C0Kh7aEt.js";import"./InputManager-BwD1PEf3.js";import"./signal-0tlktF45.js";import"./Map-DV4_DU8O.js";import"./Ground-DpNOewuO.js";import"./CollectionFlattener-73Uag1LF.js";import"./editableLayers-V9yr_aA-.js";import"./catalogUtils-CiWgGrdS.js";import"./TablesMixin-BFT6ikAR.js";import"./GraphicsCollection-DlcRCtU0.js";import"./ReactiveMap-DxvIcNmk.js";import"./selectionUtils-DYi6daQO.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-DKZWDFXK.js";import"./a11yUtils-DW8v-NB5.js";import"./heightModelInfoUtils-DQiO1_HQ.js";import"./ViewingMode-Dodu7ZZk.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-CEs_6QlQ.js";import"./Compass-DBSyeZOs.js";import"./utils-DsJqvptN.js";import"./GoTo-BCG1WN4R.js";import"./NavigationToggle-CRz1xlJz.js";import"./Zoom-C6srvgaZ.js";import"./DisplayObject-NwP1D55U.js";import"./definitions-ByNBSgP9.js";import"./enums-BlUEVwJR.js";import"./Texture-BsiXXqc8.js";import"./ClipRect-C_x5PYDD.js";import"./layerViewUtils-D2JqIDZ8.js";import"./TechniqueInstance-C2g9Xtfa.js";import"./UpdateTracking2D-DLChT46s.js";import"./BindType-BmZEZMMh.js";import"./Util-CQaYQWOS.js";import"./vec2f64-Diu2Kaa8.js";import"./Program-By3cM00b.js";import"./BufferObject-Dhco7AlX.js";import"./LabelMetric-CSrxjJk_.js";import"./enums-BRXbslMp.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-BhuXqU4L.js";import"./vec2f32-BbH2jxlN.js";import"./TileContainer-DO1c6A5U.js";import"./WGLContainer-m5Dqdi-d.js";import"./VertexArrayObject-Czm05pt7.js";import"./WGLBrushVTLSymbol-Hhd0CFGx.js";import"./vec4f32-CjrfB-0a.js";import"./StyleDefinition-BK3ROBTO.js";import"./config-MDUrh2eL.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-DUy4DuxJ.js";import"./DefaultVertexAttributeLayouts-BaFfZuup.js";import"./mat3-B7LiNcRs.js";import"./mat2df32-orApM5a3.js";import"./mat2d-C6u6dH6d.js";import"./vec3f32-Cw9Q6TO_.js";import"./earcut-BqgeR2O3.js";import"./vec2-DGogPjh1.js";import"./MapView-BeVtHZG4.js";import"./Viewpoint-kowK2Ox4.js";import"./Cyclical-L5YKfO29.js";import"./TileInfo-Dsgw3bLM.js";import"./TileKey-DZd6gJy7.js";import"./viewpointUtils-CBa44EU3.js";import"./mat2df64-CBKYtunK.js";import"./unitBezier-BX6NeAEr.js";import"./TileStrategy-Bm9AEGL5.js";import"./QueueProcessor-DHxW4yaI.js";import"./ColorBackground-DO2jUIHL.js";import"./CircularArray-CujHzHWW.js";import"./tileUtils-B7X19rIS.js";import"./featureReductionUtils-Caulfaw_.js";import"./CIMSymbolHelper-DBCkPMeB.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-CnE29zYd.js";import"./GeometryUtils-CGcKgdcH.js";import"./Rect-CUzevAry.js";import"./SDFHelper-DXbeFeJC.js";import"./floatRGBA-BTfDfCN4.js";import"./FeatureCommandQueue-D3L0Wlvg.js";import"./heatmapTextureUtils-Y8Y_7g3k.js";import"./constants-D5zmR9t2.js";import"./HighlightCounter--r4NVazo.js";import"./FeatureLayerView-QzxjxJhQ.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-CSsimScH.js";import"./LayerView-6INZgiuX.js";import"./RefreshableLayerView-BkpnzSC-.js";let i=class extends S(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([a(()=>this.layer.customParameters,async t=>{(await this.getWorker()).streamMessenger.updateCustomParameters(t)}),this.layer.on("send-message-to-socket",async t=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(t)}),this.layer.on("send-message-to-client",async t=>{(await this.getWorker()).streamMessenger.sendMessageToClient(t),this._isUserPaused&&"type"in t&&t.type==="clear"&&this.incrementSourceRefreshVersion()}),a(()=>this.layer.purgeOptions,()=>this._update()),a(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(t,o){if(Array.isArray(t))return y(t.map(r=>this.on(r,o)));const e=["data-received","message-received"].includes(t);e&&this.getWorker().then(r=>r.streamMessenger.enableEvent(t,!0));const p=super.on(t,o),s=this;return g(()=>{p.remove(),e&&(s._workerProxy.closed||s.hasEventListener(t)||s.getWorker().then(r=>r.streamMessenger.enableEvent(t,!1)))})}async queryLatestObservations(t,o){var p,s,r;if(!((p=this.layer.timeInfo)!=null&&p.endField||(s=this.layer.timeInfo)!=null&&s.startField||(r=this.layer.timeInfo)!=null&&r.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const e=await this.getWorker();return v(e.features.executeQueryForLatestObservations(this._cleanUpQuery(t),o).then(d=>{const l=u.fromJSON(d);return l.features.forEach(h=>{h.layer=this.layer,h.sourceLayer=this.layer}),l}),new u({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(t=>t.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(t=>t.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(t=>t.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const t=super._createClientOptions(),o=this;return{...t,get container(){return o.featureContainer},setProperty:e=>{this.set(e.propertyName,e.value)}}}};n([m()],i.prototype,"pipelineConnectionStatus",void 0),n([m()],i.prototype,"pipelineErrorString",void 0),n([m({readOnly:!0})],i.prototype,"connectionError",null),n([m({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=n([f("esri.views.2d.layers.StreamLayerView2D")],i);const kr=i;export{kr as default};
