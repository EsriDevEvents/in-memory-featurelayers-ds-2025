import{O as V,jS as R,X as d,a6 as g,fW as $,bq as S,Q as E}from"./index-Dv-JqQDv.js";import{$ as I}from"./Mesh-CgH6w2J9.js";import{l as j}from"./MeshVertexAttributes-CERcIROX.js";import{N as k,u as F,M as B,E as H,L as q,a as L}from"./OrientedImageryViewer-CtYCvVKi.js";import"./axisAngleDegrees-CRhw0Lf9.js";import"./quat-B52zwwOM.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./MeshComponent-CKdOnzQW.js";import"./imageUtils-CyYQ2a5H.js";import"./MeshLocalVertexSpace-Bf4xmfpu.js";import"./MeshTransform-BahjckjL.js";import"./mat4f64-Dk4dwAN8.js";import"./meshVertexSpaceUtils-1Rv9Wig9.js";import"./triangulationUtils-BhDjnI5P.js";import"./earcut-BqgeR2O3.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./DoubleArray-DzYWDmvK.js";import"./Indices-BTetzIKW.js";import"./plane-4BN6ZBDV.js";import"./vec2f64-Diu2Kaa8.js";import"./mathUtils-urfecwwD.js";import"./deduplicate-DQWVMiBh.js";import"./projection-CsHR6jE_.js";import"./mat3-B7LiNcRs.js";import"./spatialReferenceEllipsoidUtils-MFgRhPLs.js";import"./computeTranslationToOriginAndRotation-DBznw1xD.js";import"./BufferView-_0HdWB6j.js";import"./vec2-DGogPjh1.js";import"./vec3-zd-aCjeY.js";import"./vec4-mLjVaC0N.js";import"./projectPointToVector-ARkh6gdu.js";import"./vertexSpaceConversion-lekgA4Rd.js";import"./External-DIu21-ag.js";import"./a11yUtils-DW8v-NB5.js";import"./ImageryTileLayer-fe4RBqGS.js";import"./fetchRasterInfo-DZqZpcpL.js";import"./multidimensionalUtils-D878lKPa.js";import"./dataUtils-CYXYCfZg.js";import"./pixelRangeUtils-DR2RxTkt.js";import"./RasterSymbolizer-CajvlEAD.js";import"./TileInfo-Dsgw3bLM.js";import"./TileKey-DZd6gJy7.js";import"./RawBlockCache-CjAdOA2Y.js";import"./rasterProjectionHelper-8XqYElTD.js";import"./QueueProcessor-DHxW4yaI.js";import"./ReactiveMap-DxvIcNmk.js";import"./signal-0tlktF45.js";import"./PolynomialTransform-zIbJBtbs.js";import"./TilemapCache-DtHQK36T.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./jsxFactory-C3RLkrq9.js";import"./GraphicsLayer-D1PdSLqE.js";import"./GraphicsCollection-DlcRCtU0.js";import"./OrientedImageryLayer-CV8iGpId.js";import"./requestPresets-BRtD1m2T.js";import"./Circle-CRDbNHok.js";import"./geodesicUtils-C4H45CeC.js";import"./lineSegment-C_r0Slta.js";import"./sphere-j1PWtIhy.js";import"./ElevationLayer-DV0hsn9W.js";import"./ArcGISCachedService-Btgg1KPg.js";import"./TileInfoTilemapCache-CDEXrzHd.js";import"./LercDecoder-D4oZxMd7.js";import"./WorkerHandle-DGrN1tjM.js";import"./ImageryLayer-DcRjJHEy.js";import"./imageBitmapUtils-oPxcoqoO.js";import"./executeForIds-DCQXBrc7.js";import"./ElevationSamplerData-CTsi29Ag.js";import"./ElevationTile-z5FKMbqq.js";import"./InputManager-BwD1PEf3.js";import"./Viewpoint-kowK2Ox4.js";import"./Cyclical-L5YKfO29.js";import"./Viewshed.glsl-Dgwz8otk.js";import"./WaterSurface.glsl-BZtDPgAH.js";import"./RenderGeometry-D3-u-2b6.js";import"./vec3f32-Cw9Q6TO_.js";import"./DefaultTechniqueConfiguration-C28-5KBi.js";import"./basicInterfaces-wONHx_SN.js";import"./Util-CQaYQWOS.js";import"./debugFlags-CfrzpJ7g.js";import"./interfaces-B8ge7Jg9.js";import"./VertexAttribute-BnAa5VW0.js";import"./ViewingMode-Dodu7ZZk.js";import"./triangle-0a93pGd5.js";import"./doublePrecisionUtils-B0owpBza.js";import"./requestImageUtils-CO_Ks2k6.js";import"./enums-BlUEVwJR.js";import"./Texture-BsiXXqc8.js";import"./renderState-yUi34s5A.js";import"./Matrix4PassUniform-B-NXMru_.js";import"./BindType-BmZEZMMh.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./orientedBoundingBox-BiAE_4Zn.js";import"./ElevationProvider-DZcTQ1wD.js";import"./boundedPlane-DBcMJiAN.js";import"./verticalOffsetUtils-DVynISE7.js";import"./hydratedFeatures-D9SfIMrp.js";import"./projectVectorToVector-BbXjU1Ty.js";import"./frustum-W7EQ25hI.js";import"./weather-K8rA5AE9.js";import"./Scheduler-KZBBWfDI.js";import"./debugFlags-CVnXAL57.js";import"./Float4DrawUniform-DDO6IFxX.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-BaSixQu1.js";import"./InterleavedLayout-B5L5JJLV.js";import"./types-D0PSWh4d.js";import"./floatRGBA-BTfDfCN4.js";import"./Intersector-BLO31d1u.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-Czm05pt7.js";import"./BufferObject-Dhco7AlX.js";import"./ColorMaterial.glsl-D5JrE5f2.js";import"./OutputHighlight.glsl-Bs_35Qno.js";import"./vec2f32-BbH2jxlN.js";import"./dehydratedFeatures-OxpG9XrG.js";import"./edgeUtils-BJ2b_x7k.js";import"./DecodeSymbolColor.glsl-C6Fgb1JQ.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Normals-bmFJkGdK.js";import"./RealisticTree.glsl-Cu8STgaR.js";import"./devEnvironmentUtils-D6qIi8Ky.js";import"./DefaultMaterial_COLOR_GAMMA-32Y4lnr4.js";import"./resourceUtils-Bb92V0U7.js";import"./CIMSymbolHelper-DBCkPMeB.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-CnE29zYd.js";import"./GeometryUtils-CGcKgdcH.js";import"./enums-BRXbslMp.js";import"./definitions-ByNBSgP9.js";import"./mat2d-C6u6dH6d.js";import"./mat2df32-orApM5a3.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BhuXqU4L.js";import"./lineStippleUtils-BesjtKyl.js";import"./projectVectorToPoint-D_lHmELE.js";import"./DefaultLayouts-CvcU3NmP.js";import"./webStyleSymbolUtils-DSxq9N1_.js";import"./Intersector-TO0eVp6c.js";import"./RenderCoordsHelper-DKS3Y6VB.js";import"./DefaultUI-BWAdHYa0.js";import"./UpdatingHandles-C0Kh7aEt.js";import"./Map-DV4_DU8O.js";import"./Ground-DpNOewuO.js";import"./CollectionFlattener-73Uag1LF.js";import"./editableLayers-V9yr_aA-.js";import"./catalogUtils-CiWgGrdS.js";import"./TablesMixin-BFT6ikAR.js";import"./selectionUtils-DYi6daQO.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-DKZWDFXK.js";import"./heightModelInfoUtils-DQiO1_HQ.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-CEs_6QlQ.js";import"./Compass-DBSyeZOs.js";import"./utils-DsJqvptN.js";import"./GoTo-BCG1WN4R.js";import"./NavigationToggle-CRz1xlJz.js";import"./Zoom-C6srvgaZ.js";import"./viewpointUtils-Bk1t9hXb.js";import"./earthUtils-D6ZAndqJ.js";import"./spatialReferenceSupport-hDa_4tCr.js";import"./terrainUtils-BNct5mku.js";import"./Environment-Jr1y7jce.js";import"./quantityUtils-CvTt11a2.js";import"./Program-By3cM00b.js";import"./ShadowCastVisualizeTechniqueConfiguration-MkEH-Ojf.js";import"./euclideanLengthMeasurementUtils-DU6F1DKF.js";import"./ray-DhyD5gIv.js";import"./ZoomMomentumEstimator-BsIgzjw7.js";import"./labelFormatUtils-Dqk4IbyQ.js";import"./FeatureTileDescriptor3D-7bhVDC-s.js";import"./elevationInfoUtils-Cey9W7Lb.js";import"./ElevationQueryTileCache-BJ_8u3U9.js";import"./LayerConstants-B33OP6sh.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-Bg30a3zi.js";import"./project-DnDtHu17.js";import"./hitTestSelectUtils-UXJPjatw.js";import"./RenderableTile-D8pMnDSe.js";import"./enums-BRzLM11V.js";import"./TileStrategy-Bm9AEGL5.js";import"./TileKey-DixmkgbB.js";import"./config-MDUrh2eL.js";import"./DefaultVertexAttributeLayouts-BaFfZuup.js";import"./DisplayObject-NwP1D55U.js";import"./StyleDefinition-BK3ROBTO.js";import"./resources-DCd8hSXv.js";import"./edgeProcessing-AsuFhimy.js";import"./testSVGPremultipliedAlpha-D_Za_c1C.js";import"./RenderingContext-4XQ9xHRL.js";import"./ProgramCache-DtSlkqy0.js";import"./layerViewUtils-D2JqIDZ8.js";import"./vmEvent-D4Ubqkbq.js";import"./MapView-BeVtHZG4.js";import"./viewpointUtils-CBa44EU3.js";import"./mat2df64-CBKYtunK.js";import"./unitBezier-BX6NeAEr.js";import"./Tile-BD3hIcqg.js";import"./quickselect-D0_cvEX6.js";import"./utils-CXgSw6Sd.js";import"./ColorBackground-DO2jUIHL.js";import"./geometryEngine-C5uHQPwZ.js";import"./geometryEngineBase-RmbNeFm7.js";import"./hydrated-iwj77qVb.js";import"./substitute-BVUBXY1A.js";class Hr{constructor(c){this.viewModel=c,this.createFootprints=async m=>{const{coverageFrustums:r,currentBestFeature:i,isAdditionalCoverageVisible:a,view:o}=this.viewModel,e=r.filter(V);for(const p of e){let t=p.clone();if(!o.spatialReference.equals(t.spatialReference)){const{components:s,spatialReference:l,origin:n,vertexAttributes:h,vertexSpace:v}=t;if(v.type==="local"){const u=await R(n,o.spatialReference,m);d(m),t.centerAt(u)}else{const u=h.position,y=Float64Array.from(await k([...u],l.clone(),o.spatialReference.clone(),m));d(m),t=new I({vertexAttributes:new j({position:y}),components:s,spatialReference:o.spatialReference.clone()})}}p.imageID===i.attributes.objectId?this.viewModel.bestFeatureFootprint=new g({attributes:{imageID:p.imageID},geometry:t,symbol:F.clone(),visible:!1}):this.viewModel.additionalFootprints.push(new g({attributes:{imageID:p.imageID},geometry:t,symbol:B.clone(),visible:a}))}},this.updateFootprint=async(m,r)=>{const{currentBestFeature:i,imagePointsInView:a,activeViewer:o,footprintExtent:e,view:p}=this.viewModel,t=$(I,this.viewModel.getCurrentBestFeaturePolygon().geometry),s=o==null?void 0:o.imageSize;if(!(i&&t&&a&&s&&e))return;const{cameraHeight:l,location:n,cameraPitch:h,horizontalFieldOfView:v,verticalFieldOfView:u,cameraRoll:y,imageRotation:A}=i.attributes,P=n.toArray(),{vertexAttributes:{position:x},spatialReference:z}=t,O=await W(x,z,n.spatialReference),C=await H(m,{feature:i,imageProperties:{width:s[0],height:s[1]},options:r,footprintExtent:e});d(r);let w=C.filter(V);if(!w.length)return;w[0].spatialReference.equals(n.spatialReference)||(w=await Promise.all(w.map(async f=>{const b=await R(f,n.spatialReference,r);return d(r),b})));const D=await q(a.slice(0,4).map(({x:f,y:b})=>[f,b]),w.slice(0,4).map(f=>f.toArray()),{cameraHeight:l,cameraLocation:P,cameraPitch:h,frustumVertices:O,horizontalFieldOfView:v,imageHeight:s[1],imageWidth:s[0],inSRS:{wkid:n.spatialReference.wkid},outSRS:{wkid:p.spatialReference.wkid},verticalFieldOfView:u,cameraRoll:y??0,imageRotation:A??0,options:r});this.viewModel.updateCurrentCoveragePolygon(new g({attributes:{imageID:i.attributes.objectId},geometry:D,symbol:F.clone(),visible:this.viewModel.currentCoverageVisible}))},this.updateFootprintPanorama=async(m,r)=>{var l;await S(r);const{horizontalFieldOfView:i,pitch:a,verticalFieldOfView:o,yaw:e}=m,p=(l=this.viewModel.currentBestFeature)==null?void 0:l.clone();if(!p)return;const{attributes:t}=p;t.orientedImageryType=null,t.cameraHeading=(e+t.cameraHeading)%360,t.cameraPitch=a,t.horizontalFieldOfView=i,t.verticalFieldOfView=o,t.cameraRoll=0;const{frustum:s}=L(t);s&&this.viewModel.updateCurrentCoveragePolygon(new g({attributes:{imageID:t.objectId},geometry:s,symbol:F.clone(),visible:this.viewModel.currentCoverageVisible}))}}updateGroundElevation(c,m){const{geometry:r}=this.viewModel.currentBestFeature,i=m.queryElevation(r);c.forEach(a=>{const{geometry:o}=a;switch(o==null?void 0:o.type){case"mesh":{const{vertexAttributes:{position:e}}=o,p=Math.floor(e.length/3);for(let t=0;t<p;t+=1)e[3*t+2]+=(i==null?void 0:i.z)??0;break}case"point":o.z=(o.z??0)+((i==null?void 0:i.z)??0)}})}}async function W(M,c,m,r){return Float64Array.from((await Promise.all(M.reduce((i,a,o)=>{const e=Math.floor(o/3);return i[e]=i[e]??[],i[e].push(a),i},new Array).map(async i=>(await R(new E(i,c),m,r)).toArray()))).flat())}export{Hr as default};
