import{m1 as Y,ct as B,gH as x,jD as K,fV as X,dF as _,bK as k,fB as M,Q as R,db as J,a6 as w,eo as Q,el as U,en as q,hM as F,o as V,j as C,y as $,P as Z}from"./index-Dv-JqQDv.js";import tt from"./GraphicsLayer-D1PdSLqE.js";import{i as W}from"./TelemetryDisplay-B5I-UL_Q.js";import{f as et}from"./OverlayContainer-CiCVV0Fz.js";import{n as it}from"./vec2f64-Diu2Kaa8.js";import{s as rt}from"./DisplayObject-NwP1D55U.js";import{a as st,f as ot}from"./LayerView2D-Ulqog2NM.js";import{c as H}from"./BufferObject-Dhco7AlX.js";import{D as nt,F as z,E as lt}from"./enums-BlUEVwJR.js";import{e as at,c as ht}from"./Texture-BsiXXqc8.js";import{o as mt}from"./VertexArrayObject-Czm05pt7.js";import{t as pt}from"./GraphicContainer-Cy_BIt0k.js";import{V as yt}from"./GraphicsView2D-C4K17d-1.js";import{y as ct}from"./LayerView-6INZgiuX.js";import"./GraphicsCollection-DlcRCtU0.js";import"./mat3-B7LiNcRs.js";import"./DefaultUI-BWAdHYa0.js";import"./jsxFactory-C3RLkrq9.js";import"./UpdatingHandles-C0Kh7aEt.js";import"./InputManager-BwD1PEf3.js";import"./signal-0tlktF45.js";import"./Map-DV4_DU8O.js";import"./Ground-DpNOewuO.js";import"./CollectionFlattener-73Uag1LF.js";import"./editableLayers-V9yr_aA-.js";import"./catalogUtils-CiWgGrdS.js";import"./TablesMixin-BFT6ikAR.js";import"./ReactiveMap-DxvIcNmk.js";import"./selectionUtils-DYi6daQO.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-DKZWDFXK.js";import"./a11yUtils-DW8v-NB5.js";import"./heightModelInfoUtils-DQiO1_HQ.js";import"./ViewingMode-Dodu7ZZk.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-CEs_6QlQ.js";import"./Compass-DBSyeZOs.js";import"./utils-DsJqvptN.js";import"./GoTo-BCG1WN4R.js";import"./NavigationToggle-CRz1xlJz.js";import"./Zoom-C6srvgaZ.js";import"./vec2f32-BbH2jxlN.js";import"./vec3f32-Cw9Q6TO_.js";import"./viewpointUtils-CBa44EU3.js";import"./Viewpoint-kowK2Ox4.js";import"./Cyclical-L5YKfO29.js";import"./mat2d-C6u6dH6d.js";import"./mat2df64-CBKYtunK.js";import"./vec2-DGogPjh1.js";import"./WGLContainer-m5Dqdi-d.js";import"./definitions-ByNBSgP9.js";import"./LabelMetric-CSrxjJk_.js";import"./enums-BRXbslMp.js";import"./Program-By3cM00b.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-BhuXqU4L.js";import"./WGLBrushVTLSymbol-Hhd0CFGx.js";import"./vec4f32-CjrfB-0a.js";import"./StyleDefinition-BK3ROBTO.js";import"./config-MDUrh2eL.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-DUy4DuxJ.js";import"./DefaultVertexAttributeLayouts-BaFfZuup.js";import"./TileKey-DixmkgbB.js";import"./mat2df32-orApM5a3.js";import"./Container-BCZInv5n.js";import"./EffectView-D358IIvW.js";import"./highlightReasons-Bl95o-z6.js";import"./Tile-BD3hIcqg.js";import"./quickselect-D0_cvEX6.js";import"./earcut-BqgeR2O3.js";import"./MapView-BeVtHZG4.js";import"./TileInfo-Dsgw3bLM.js";import"./TileKey-DZd6gJy7.js";import"./unitBezier-BX6NeAEr.js";import"./TileStrategy-Bm9AEGL5.js";import"./QueueProcessor-DHxW4yaI.js";import"./utils-CXgSw6Sd.js";import"./ColorBackground-DO2jUIHL.js";import"./ClipRect-C_x5PYDD.js";import"./layerViewUtils-D2JqIDZ8.js";import"./AGraphicContainer-BCFkzrhS.js";import"./TechniqueInstance-C2g9Xtfa.js";import"./UpdateTracking2D-DLChT46s.js";import"./BindType-BmZEZMMh.js";import"./Util-CQaYQWOS.js";import"./TileContainer-DO1c6A5U.js";import"./FeatureCommandQueue-D3L0Wlvg.js";import"./CIMSymbolHelper-DBCkPMeB.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-CnE29zYd.js";import"./GeometryUtils-CGcKgdcH.js";import"./Rect-CUzevAry.js";import"./heatmapTextureUtils-Y8Y_7g3k.js";import"./constants-D5zmR9t2.js";import"./AttributeStore-Ci4QkEXR.js";import"./labelFormatUtils-Dqk4IbyQ.js";import"./TimeOnly-DM31kLsz.js";import"./centroid-DdLmOD72.js";import"./timeSupport-DgYx0Uxy.js";import"./json-Wa8cmqdu.js";import"./normalizeUtilsSync-B3yip2wp.js";const b=2;class dt extends rt{constructor(t){super(),this.element=t,this._handles=new Y,this.isWrapAround=!1,this.perspectiveTransform=it(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(B(()=>this.element,()=>{const e=this.element;this.ready(),e&&this._handles.add(K(e,"play",()=>this.requestRender()))},x))}getMesh(t){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=X(this.texture),this._vao&&(this._vao.dispose(),this._vao=null),this._vbo&&(this._vbo.dispose(),this._vbo=null),this.texture&&(this.texture.dispose(),this.texture=null)}get textureSize(){if(!this.texture)return[1,1];const t=this.texture.descriptor;return[t.width,t.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(t){const e=this.element;if(e==null)return;const{context:r}=t,{videoWidth:i,videoHeight:o}=e;if(i!==0&&o!==0){if(this.texture)e.paused||this.texture.setData(e);else{const n=new at;n.wrapMode=nt.CLAMP_TO_EDGE,n.preMultiplyAlpha=!0,n.width=i,n.height=o,this.texture=new ht(r,n,e)}e.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(t)}}_createTransforms(){return null}updateDrawCoords(t,e,r,i){const o=this.element,n=this._getFrameInfo();if(!o||!n)return;this._initializeData(t,n,r);const{controlPoints:a,horizon:h}=n,m=Math.sqrt(a.length),c=m,{x:l,y:p}=t,u=this._vertices,T=a[0],P=a[m-1],N=a[(c-1)*m],j=a[(c-1)*m+m-1],G=_(h?h[0].mapPoint:T.mapPoint,r),O=_(h?h[1].mapPoint:P.mapPoint,r),f=_(N.mapPoint,r),D=_(j.mapPoint,r);this.clipGeometry=h?new st({geometry:k.fromJSON({rings:[[[f.x,f.y],[D.x,D.y],[O.x,O.y],[G.x,G.y],[f.x,f.y]]],spatialReference:r})}):null;for(let y=0;y<a.length;y++){const L=a[y],{sourcePoint:S,mapPoint:A}=L;if(S==null||A==null)continue;const v=_(A,r);u[y*b+0]=v.x-l,u[y*b+1]=v.y-p}let E=e;if(i){const y=Math.min(G.x,O.x,f.x,D.x),L=Math.max(G.x,O.x,f.x,D.x),{worldWidth:S,xBounds:A}=i,[v,I]=A;y<v&&L>v?E=S:L>I&&y<I&&(E=-S)}this.wrapAroundShift=E,this.isWrapAround=E!==0}getVAO(t,e,r){if(this._vertices==null)return null;const i=this._vertices;if(this._vao)this._vbo.setData(i);else{this._vbo=H.createVertex(t,z.DYNAMIC_DRAW,i);const o=H.createVertex(t,z.STATIC_DRAW,this._texCoords);this._ibo=H.createIndex(t,z.DYNAMIC_DRAW,this._indices),this._vao=new mt(t,r,e,{geometry:this._vbo,tex:o},this._ibo)}return this._vao}draw(t){t.drawElements(lt.TRIANGLE_STRIP,this._indices.length,t.gl.UNSIGNED_SHORT,0)}_initializeData(t,e,r){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:i}=e,o=Math.sqrt(i.length),n=o,a=new Float32Array(b*i.length),h=new Uint16Array(2*i.length);for(let l=0;l<i.length;l++){const p=i[l],{sourcePoint:u,mapPoint:T}=p;if(u==null||T==null)continue;const P=_(T,r);a[l*b+0]=P.x-t.x,a[l*b+1]=P.y-t.y,h[2*l+0]=u.x,h[2*l+1]=u.y}const m=new Uint16Array(n*o+(n-2)*(o+2));let c=0;for(let l=0;l<n;l++){for(let p=0;p<o;p++)m[c++]=l*o+p,m[c++]=(l+1)*o+p;l<n-2&&(m[c++]=(l+1)*o+(o-1),m[c++]=(l+1)*o)}this._vertices=a,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const t=this._getFrameControlPoints(),e=this.frameHorizonPoints;let r=null;if(e){const i=e.startX,o=e.startY,n=e.endX,a=e.endY;r=[{sourcePoint:M(i,o),mapPoint:new R(e.startLongitude,e.startLatitude)},{sourcePoint:M(n,a),mapPoint:new R(e.endLongitude,e.endLatitude)}]}return{controlPoints:t,horizon:r}}_getFrameControlPoints(){const t=this.groundControlPoints,e=t==null?void 0:t.length;if(!e)return[];const r=new Array(e);for(let i=0;i<e;i++){const{x:o,y:n,lat:a,lon:h}=t[i];r[i]={sourcePoint:M(o,-n),mapPoint:new R(h,a)}}return r}}const g=new J([255,127,0]);let d=class extends ot(ct){constructor(){super(...arguments),this._graphicsLayer=new tt,this._frameOutlineGraphic=new w({symbol:new Q({outline:{type:"simple-line",color:g}})}),this._sensorTrailGraphic=new w({symbol:new U({color:g})}),this._lineOfSightGraphic=new w({symbol:new U({color:g})}),this._sensorLocationGraphic=new w({symbol:new q({color:g})}),this._frameCenterGraphic=new w({symbol:new q({color:g})}),this._overlayContainer=null,this.layer=null,this.symbolColor=g,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=F(this._graphicsLayer)}initialize(){var s,t,e,r,i;this.addHandles(V(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},x)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new W({frameCenter:((s=this.layer.telemetryDisplay)==null?void 0:s.frameCenter)??!0,frameOutline:((t=this.layer.telemetryDisplay)==null?void 0:t.frameOutline)??!0,lineOfSight:((e=this.layer.telemetryDisplay)==null?void 0:e.lineOfSight)??!0,sensorLocation:((r=this.layer.telemetryDisplay)==null?void 0:r.sensorLocation)??!0,sensorTrail:((i=this.layer.telemetryDisplay)==null?void 0:i.sensorTrail)??!0})}attach(){this._overlayContainer=new et,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new yt({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new pt(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([V(()=>{var s,t,e,r,i;return[(s=this.layer.telemetryDisplay)==null?void 0:s.frameCenter,(t=this.layer.telemetryDisplay)==null?void 0:t.frameOutline,(e=this.layer.telemetryDisplay)==null?void 0:e.sensorLocation,(r=this.layer.telemetryDisplay)==null?void 0:r.sensorTrail,(i=this.layer.telemetryDisplay)==null?void 0:i.lineOfSight]},()=>this._updateVisibleTelemetryElements(),x),V(()=>{var s,t,e,r,i;return[this.layer.telemetry,(s=this.visibleTelemetryElements)==null?void 0:s.frameCenter,(t=this.visibleTelemetryElements)==null?void 0:t.frameOutline,(e=this.visibleTelemetryElements)==null?void 0:e.sensorLocation,(r=this.visibleTelemetryElements)==null?void 0:r.sensorTrail,(i=this.visibleTelemetryElements)==null?void 0:i.lineOfSight]},()=>this._updateGraphicGeometries(),x)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=F(this.graphicsView)}supportsSpatialReference(s){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(s){this.graphicsView.processUpdate(s)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:s}=this.layer,{visibleTelemetryElements:t}=this;s&&t&&(t.frameOutline&&s.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,t.sensorTrail&&s.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,t.lineOfSight&&s.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,t.sensorLocation&&s.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,t.frameCenter&&s.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const s=new dt(this.layer.videoElement);this.addAttachHandles([V(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{s.frameHorizonPoints=this.layer.frameHorizonPoints,s.groundControlPoints=this.layer.groundControlPoints},x)]),this._overlayContainer.addChild(s),this.view.stage.requestRender()}};C([$()],d.prototype,"graphicsView",void 0),C([$()],d.prototype,"layer",void 0),C([$()],d.prototype,"symbolColor",void 0),C([$({type:W})],d.prototype,"visibleTelemetryElements",void 0),d=C([Z("esri.views.2d.layers.VideoLayerView2D")],d);const ci=d;export{ci as default};
